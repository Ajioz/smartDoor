{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Root Stack for AWS Amplify CLI",
  "Parameters":
    {
      "DeploymentBucketName":
        {
          "Description": "Name of the common deployment bucket provided by the parent stack",
          "Type": "String",
          "Default": "DeploymentBucket",
        },
      "AuthRoleName": { "Type": "String", "Default": "AuthRoleName" },
      "UnauthRoleName": { "Type": "String", "Default": "UnauthRoleName" },
    },
  "Resources":
    {
      "DeploymentBucket":
        {
          "Type": "AWS::S3::Bucket",
          "DeletionPolicy": "Retain",
          "Properties":
            {
              "BucketEncryption":
                {
                  "ServerSideEncryptionConfiguration":
                    [
                      {
                        "ServerSideEncryptionByDefault":
                          { "SSEAlgorithm": "AES256" },
                      },
                    ],
                },
              "BucketName": { "Ref": "DeploymentBucketName" },
              "VersioningConfiguration": { "Status": "Enabled" },
            },
        },
      "AuthRole":
        {
          "Type": "AWS::IAM::Role",
          "Properties":
            {
              "RoleName": { "Ref": "AuthRoleName" },
              "AssumeRolePolicyDocument":
                {
                  "Version": "2012-10-17",
                  "Statement":
                    [
                      {
                        "Sid": "",
                        "Effect": "Deny",
                        "Principal":
                          { "Federated": "cognito-identity.amazonaws.com" },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                      },
                    ],
                },
            },
        },
      "UnauthRole":
        {
          "Type": "AWS::IAM::Role",
          "Properties":
            {
              "RoleName": { "Ref": "UnauthRoleName" },
              "AssumeRolePolicyDocument":
                {
                  "Version": "2012-10-17",
                  "Statement":
                    [
                      {
                        "Sid": "",
                        "Effect": "Deny",
                        "Principal":
                          { "Federated": "cognito-identity.amazonaws.com" },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                      },
                    ],
                },
            },
        },
      "authcognitoajiozi":
        {
          "Type": "AWS::CloudFormation::Stack",
          "Properties":
            {
              "TemplateURL": "https://s3.amazonaws.com/amplify-awsamplifyreacttempl-test-103101-deployment/amplify-cfn-templates/auth/cognitoajiozi-cloudformation-template.yml",
              "Parameters":
                {
                  "identityPoolName": "cognitoajiozi_identitypool_81d9f49f",
                  "allowUnauthenticatedIdentities": false,
                  "thirdPartyAuth": false,
                  "lambdaLogPolicy": "cognitoajiozi_lambda_log_policy",
                  "openIdLambdaRoleName": "cognitoajiozi_openid_lambda_role",
                  "openIdRolePolicy": "cognitoajiozi_openid_pass_role_policy",
                  "openIdLambdaIAMPolicy": "cognitoajiozi_openid_lambda_iam_policy",
                  "openIdLogPolicy": "cognitoajiozi_openid_lambda_log_policy",
                  "userPoolName": "cognitoajiozi_userpool_81d9f49f",
                  "autoVerifiedAttributes": "email",
                  "mfaConfiguration": "OFF",
                  "mfaTypes": "SMS Text Message",
                  "roleName": "cognitoajiozi_sns-role",
                  "roleExternalId": "cognitoajiozi_role_external_id",
                  "policyName": "cognitoajiozi-sns-policy",
                  "smsAuthenticationMessage": "Your authentication code is {####}",
                  "smsVerificationMessage": "Your verification code is {####}",
                  "emailVerificationSubject": "Your verification code",
                  "emailVerificationMessage": "Your verification code is {####}",
                  "defaultPasswordPolicy": false,
                  "passwordPolicyMinLength": 8,
                  "passwordPolicyCharacters": "Requires Lowercase,Requires Uppercase,Requires Numbers,Requires Symbols",
                  "requiredAttributes": "email",
                  "userpoolClientName": "cognitoajiozi_app_client",
                  "userpoolClientGenerateSecret": true,
                  "userpoolClientRefreshTokenValidity": 30,
                  "userpoolClientReadAttributes": "email",
                  "mfaLambdaRole": "cognitoajiozi_totp_lambda_role",
                  "mfaLambdaLogPolicy": "cognitoajiozi_totp_lambda_log_policy",
                  "mfaPassRolePolicy": "cognitoajiozi_totp_pass_role_policy",
                  "mfaLambdaIAMPolicy": "cognitoajiozi_totp_lambda_iam_policy",
                  "userpoolClientLambdaRole": "cognitoajiozi_userpoolclient_lambda_role",
                  "userpoolClientLogPolicy": "cognitoajiozi_userpoolclient_lambda_log_policy",
                  "userpoolClientLambdaPolicy": "cognitoajiozi_userpoolclient_lambda_iam_policy",
                  "userpoolClientSetAttributes": false,
                  "useDefault": "default",
                  "resourceName": "cognitoajiozi",
                  "authSelections": "identityPoolAndUserPool",
                  "authRoleName": { "Ref": "AuthRoleName" },
                  "unauthRoleName": { "Ref": "UnauthRoleName" },
                  "authRoleArn": { "Fn::GetAtt": ["AuthRole", "Arn"] },
                  "unauthRoleArn": { "Fn::GetAtt": ["UnauthRole", "Arn"] },
                  "env": "test",
                },
            },
        },
      "UpdateRolesWithIDPFunction":
        {
          "DependsOn": ["AuthRole", "UnauthRole", "authcognitoajiozi"],
          "Type": "AWS::Lambda::Function",
          "Properties":
            {
              "Code":
                {
                  "ZipFile":
                    {
                      "Fn::Join":
                        [
                          "\n",
                          [
                            "import * as IAM from '@aws-sdk/client-iam';",
                            "import * as response from 'cfn-response';",
                            "let responseData = {};",
                            "exports.handler = function(event, context) {",
                            "  try {",
                            "    let authRoleName = event.ResourceProperties.authRoleName;",
                            "    let unauthRoleName = event.ResourceProperties.unauthRoleName;",
                            "    let idpId = event.ResourceProperties.idpId;",
                            "    let promises = [];",
                            "    let authParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}}}]};",
                            "    let unauthParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}}}]};",
                            "    if (event.RequestType == 'Delete') {",
                            "        delete authParamsJson.Statement[0].Condition;",
                            "        delete unauthParamsJson.Statement[0].Condition;",
                            "        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
                            "        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
                            "        const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                            "        promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
                            "        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
                            "        Promise.all(promises)",
                            "         .then((res) => {",
                            '            console.log("delete response data" + JSON.stringify(res));',
                            "            response.send(event, context, response.SUCCESS, {});",
                            "         });",
                            "    }",
                            "    if (event.RequestType == 'Update' || event.RequestType == 'Create') {",
                            "       const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                            "        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
                            "        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
                            "        promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
                            "        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
                            "        Promise.all(promises)",
                            "         .then((res) => {",
                            '            console.log("createORupdate" + res);',
                            '            console.log("response data" + JSON.stringify(res));',
                            "            response.send(event, context, response.SUCCESS, {});",
                            "         });",
                            "    }",
                            "  } catch(err) {",
                            "       console.log(err.stack);",
                            "       responseData = {Error: err};",
                            "       response.send(event, context, response.FAILED, responseData);",
                            "       throw err;",
                            "  }",
                            "};",
                          ],
                        ],
                    },
                },
              "Handler": "index.handler",
              "Runtime": "nodejs18.x",
              "Timeout": "300",
              "Role":
                { "Fn::GetAtt": ["UpdateRolesWithIDPFunctionRole", "Arn"] },
            },
        },
      "UpdateRolesWithIDPFunctionOutputs":
        {
          "Type": "Custom::LambdaCallout",
          "Properties":
            {
              "ServiceToken":
                { "Fn::GetAtt": ["UpdateRolesWithIDPFunction", "Arn"] },
              "region": { "Ref": "AWS::Region" },
              "idpId":
                {
                  "Fn::GetAtt": ["authcognitoajiozi", "Outputs.IdentityPoolId"],
                },
              "authRoleName": { "Ref": "AuthRoleName" },
              "unauthRoleName": { "Ref": "UnauthRoleName" },
            },
        },
      "UpdateRolesWithIDPFunctionRole":
        {
          "Type": "AWS::IAM::Role",
          "Properties":
            {
              "RoleName":
                { "Fn::Join": ["", [{ "Ref": "AuthRoleName" }, "-idp"]] },
              "AssumeRolePolicyDocument":
                {
                  "Version": "2012-10-17",
                  "Statement":
                    [
                      {
                        "Effect": "Allow",
                        "Principal": { "Service": ["lambda.amazonaws.com"] },
                        "Action": ["sts:AssumeRole"],
                      },
                    ],
                },
              "Policies":
                [
                  {
                    "PolicyName": "UpdateRolesWithIDPFunctionPolicy",
                    "PolicyDocument":
                      {
                        "Version": "2012-10-17",
                        "Statement":
                          [
                            {
                              "Effect": "Allow",
                              "Action":
                                [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents",
                                ],
                              "Resource": "arn:aws:logs:*:*:*",
                            },
                            {
                              "Effect": "Allow",
                              "Action": "iam:UpdateAssumeRolePolicy",
                              "Resource": { "Fn::GetAtt": ["AuthRole", "Arn"] },
                            },
                            {
                              "Effect": "Allow",
                              "Action": "iam:UpdateAssumeRolePolicy",
                              "Resource":
                                { "Fn::GetAtt": ["UnauthRole", "Arn"] },
                            },
                          ],
                      },
                  },
                ],
            },
        },
    },
  "Outputs":
    {
      "Region":
        {
          "Description": "CloudFormation provider root stack Region",
          "Value": { "Ref": "AWS::Region" },
          "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-Region" } },
        },
      "StackName":
        {
          "Description": "CloudFormation provider root stack ID",
          "Value": { "Ref": "AWS::StackName" },
          "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-StackName" } },
        },
      "StackId":
        {
          "Description": "CloudFormation provider root stack name",
          "Value": { "Ref": "AWS::StackId" },
          "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-StackId" } },
        },
      "DeploymentBucketName":
        {
          "Description": "CloudFormation provider root stack deployment bucket name",
          "Value": { "Ref": "DeploymentBucketName" },
          "Export":
            { "Name": { "Fn::Sub": "${AWS::StackName}-DeploymentBucketName" } },
        },
      "AuthRoleArn": { "Value": { "Fn::GetAtt": ["AuthRole", "Arn"] } },
      "UnauthRoleArn": { "Value": { "Fn::GetAtt": ["UnauthRole", "Arn"] } },
      "AuthRoleName": { "Value": { "Ref": "AuthRole" } },
      "UnauthRoleName": { "Value": { "Ref": "UnauthRole" } },
    },
}
